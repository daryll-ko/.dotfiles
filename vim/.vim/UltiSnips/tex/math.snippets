global !p

def math() -> bool:
	return vim.eval("vimtex#syntax#in_mathzone()") == "1"

def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""

	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]

	# Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"

	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]

	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''

	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)

def create_matrix(r: int, c: int, start: str, sep: str, end: str) -> str:
	res = ""
	for i in range(r):
		row = sep.join([f" ${c*i + j + 1} " for j in range(c)])
		res += f"{start}{row}{end}"
	return res[:-1]

endglobal

context "math()"
post_jump "create_matrix_placeholders(snip)"
snippet 'mat([1-9]+),([1-9]+)' "matrix" Ar
\left[
\begin{array}{`!p snip.rv = "c" * int(match.group(2))`}
`!p snip.rv = create_matrix(
	int(match.group(1)),	# r
	int(match.group(2)),	# c
	"\t",					# start
	"&",					# sep
	"\\\\\\\\\n"			# end
)`
\end{array}
\right]
$0
endsnippet

context "math()"
post_jump "create_matrix_placeholders(snip)"
snippet 'amt([1-9]+),([1-9]+),([1-9]+)' "augmented matrix" Ar
\left[
\begin{array}{`!p snip.rv = "c" * int(match.group(2)) + "|" + "c" * int(match.group(3))`}
`!p snip.rv = create_matrix(
	int(match.group(1)),						# r
	int(match.group(2)) + int(match.group(3)),	# c
	"\t",										# start
	"&",										# sep
	"\\\\\\\\\n"								# end
)`
\end{array}
\right]
endsnippet

context "math()"
snippet ff "\frac{*}{*}"
\frac{$1}{$2}$0
endsnippet
