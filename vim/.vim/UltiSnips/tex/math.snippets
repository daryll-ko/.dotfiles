global !p

def math() -> bool:
	return vim.eval("vimtex#syntax#in_mathzone()") == "1"

def create_matrix_with_tabstops(snip):
	anon_snippet_body = ""

	start, start_pos = snip.snippet_start
	end, end_pos = snip.snippet_end

	for i in range(start, end + 1):
		if i == start:
			anon_snippet_body += snip.buffer[start][start_pos:].strip() + '\n'
			snip.buffer[start] = snip.buffer[start][:start_pos]
		elif i == end:
			anon_snippet_body += snip.buffer[end][:end_pos+1].strip()
		else:
			anon_snippet_body += snip.buffer[i].strip() + '\n'
	
	snip.buffer[start+1:end] = ''

	snip.expand_anon(anon_snippet_body)

def create_matrix(r: int, c: int, start: str, sep: str, end: str) -> str:
	res = ""
	for i in range(r):
		row = sep.join([f" ${c*i + j + 1} " for j in range(c)])
		res += f"{start}{row}{end}"
	return res[:-1]

endglobal

context "math()"
post_jump "create_matrix_with_tabstops(snip)"
snippet 'mat([1-9]+),([1-9]+)' "matrix" Ar
\left[
\begin{array}{`!p snip.rv = "c" * int(match.group(2))`}
`!p snip.rv = create_matrix(
	int(match.group(1)),	# r
	int(match.group(2)),	# c
	"\t",					# start
	"&",					# sep
	"\\\\\\\\\n"			# end
)`
\end{array}
\right]
$0
endsnippet

context "math()"
post_jump "create_matrix_with_tabstops(snip)"
snippet 'amt([1-9]+),([1-9]+),([1-9]+)' "augmented matrix" Ar
\left[
\begin{array}{`!p snip.rv = "c" * int(match.group(2)) + "|" + "c" * int(match.group(3))`}
`!p snip.rv = create_matrix(
	int(match.group(1)),						# r
	int(match.group(2)) + int(match.group(3)),	# c
	"\t",										# start
	"&",										# sep
	"\\\\\\\\\n"								# end
)`
\end{array}
\right]
$0
endsnippet

context "math()"
snippet ff "\frac{*}{*}" Ai
\frac{$1}{$2}$0
endsnippet

context "math()"
snippet sum "sum" Ai
\sum_{${1:i = 1}}^{${2:n}}$3
endsnippet

context "math()"
snippet int "integral" Ai
\int_{${1:-\infty}}^{${2:\infty}}$3
endsnippet

context "not math()"
snippet qed "\blacksquare" Ai
\(\blacksquare\)$0
endsnippet

context "math()"
snippet qq "& =" Ai
& =$0
endsnippet

context "math()"
snippet df "\diff" Ai
\diff$0
endsnippet
